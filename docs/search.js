window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "weather_display", "modulename": "weather_display", "kind": "module", "doc": "<h1 id=\"description-of-the-weather_display-package\">Description of the weather_display package</h1>\n\n<p>The weather_display package contains all modules and classes related to\nthe gain, storage and display of weather data from different sources.</p>\n\n<h1 id=\"dependencies-and-installation\">Dependencies and installation</h1>\n\n<p>The weather_display package depends on a Python Version &gt;= 3.9 and all\ndependencies that are listed in the <code>requirements.txt</code> file.</p>\n\n<p>All dependencies can be installed with pip using the provided\n<code>requirements.txt</code> and the command <code>pip install -r requirements.txt</code>.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p>The weather_display package can be executed directly with the\ncommand <code>python -m weather_display</code> from its parent directory.</p>\n\n<h1 id=\"further-remarks\">Further remarks</h1>\n\n<p>Generating a documentation in HTML format can be achieved by using\n<code>pdoc</code> and the following commands, issued in the weather_display parent\ndirectory: <code>pdoc weather_display -o docs</code>.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.display", "modulename": "weather_display.display", "kind": "module", "doc": "<p>The display module contains the Display class that is responsible for displaying\nweather data handed to the class or its methods on the selected output channel.\nThe weather data is formatted to align with the chosen output channel.</p>\n"}, {"fullname": "weather_display.display.Display", "modulename": "weather_display.display", "qualname": "Display", "kind": "class", "doc": "<p>Class that contains the configuration for different output channels.\nThe methods of the class can be used to display DisplayData objects\non the selected output channel with the set options.</p>\n"}, {"fullname": "weather_display.display.Display.__init__", "modulename": "weather_display.display", "qualname": "Display.__init__", "kind": "function", "doc": "<p>Constructor for the Display objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>output (int):\n    A number representing the chosen output channel.\n    Default value is 0 representing the console output.</p>\n\n<p>width (int):\n    Width of the output display in pixels.\n    The default value is 128 pixels.</p>\n\n<p>height (int):\n    Height of the output display in pixels.\n    The default value is 128 pixels.</p>\n\n<p>color_mode (str):\n    A string that is part of the COLOR_MODES tuple and\n    represent the black and white or color color mode.\n    The default value is the black and white color mode (bw).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">128</span>, </span><span class=\"param\"><span class=\"n\">color_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;bw&#39;</span></span>)</span>"}, {"fullname": "weather_display.display.Display.OUTPUTS", "modulename": "weather_display.display", "qualname": "Display.OUTPUTS", "kind": "variable", "doc": "<p>OUTPUTS (tuple[int, int]):\n    A tuple containing the numbers of available output channels.\n    Zero stands for the default console output.</p>\n", "default_value": "(0, 1)"}, {"fullname": "weather_display.display.Display.COLOR_MODES", "modulename": "weather_display.display", "qualname": "Display.COLOR_MODES", "kind": "variable", "doc": "<p>COLOR_MODES (tuple[str, str]):\n    A tuple containing strings that represent the accepted color modes.\n    Two color modes are accepted in form of the black and white (bw) and\n    color (c) color mode.</p>\n", "default_value": "(&#x27;bw&#x27;, &#x27;c&#x27;)"}, {"fullname": "weather_display.display.Display.output", "modulename": "weather_display.display", "qualname": "Display.output", "kind": "variable", "doc": "<p>output (int):\n    A number representing the chosen output channel.\n    Default value is 0 representing the console output.</p>\n"}, {"fullname": "weather_display.display.Display.width", "modulename": "weather_display.display", "qualname": "Display.width", "kind": "variable", "doc": "<p>width (int):\n    Width of the output display in pixels.\n    The default value is 128 pixels.</p>\n"}, {"fullname": "weather_display.display.Display.height", "modulename": "weather_display.display", "qualname": "Display.height", "kind": "variable", "doc": "<p>height (int):\n    Height of the output display in pixels.\n    The default value is 128 pixels.</p>\n"}, {"fullname": "weather_display.display.Display.color_mode", "modulename": "weather_display.display", "qualname": "Display.color_mode", "kind": "variable", "doc": "<p>color_mode (str):\n    A string that is part of the COLOR_MODES tuple and\n    represent the black and white or color color mode.\n    The default value is the black and white color mode (bw).</p>\n"}, {"fullname": "weather_display.display.Display.output_to_console", "modulename": "weather_display.display", "qualname": "Display.output_to_console", "kind": "function", "doc": "<p>Method that outputs the weather data contained in the DisplayData object\nto the console with the configurated settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.display.Display.output_to_display", "modulename": "weather_display.display", "qualname": "Display.output_to_display", "kind": "function", "doc": "<p>Method that outputs the weather data contained in the DisplayData object\nto the display with the configurated settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the display.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.display.Display.show", "modulename": "weather_display.display", "qualname": "Display.show", "kind": "function", "doc": "<p>Method that tries to show the provided display_data on the configurated\noutput channel. The method automatically chooses the correct output function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the configurated output channel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_data", "modulename": "weather_display.dwd_data", "kind": "module", "doc": "<p>The dwd_data module contains the DwdData class that is used to make all direct calls\nto the DWD-API, save the received data and preprocess the received data for display\npurposes.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData", "modulename": "weather_display.dwd_data", "qualname": "DwdData", "kind": "class", "doc": "<p>Class that contains the DWD-API base url and stores the station used for\nthe data requests. It stores the received data for later use or display.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.__init__", "modulename": "weather_display.dwd_data", "qualname": "DwdData.__init__", "kind": "function", "doc": "<p>Constructor for the DwdData objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station (Station):\n    Station object containing all informations of the station.</p>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">station</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "weather_display.dwd_data.DwdData.station", "modulename": "weather_display.dwd_data", "qualname": "DwdData.station", "kind": "variable", "doc": "<p>station (Station):\n    Station object containing all informations of the station.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.url", "modulename": "weather_display.dwd_data", "qualname": "DwdData.url", "kind": "variable", "doc": "<p>url (str):\n    Standard base url for the DWD-API.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.attempts", "modulename": "weather_display.dwd_data", "qualname": "DwdData.attempts", "kind": "variable", "doc": "<p>attempts (int):\n    Number of connection attempts.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.timeout", "modulename": "weather_display.dwd_data", "qualname": "DwdData.timeout", "kind": "variable", "doc": "<p>timeout (int):\n    Connection timeout for a server answer in seconds.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.station_data", "modulename": "weather_display.dwd_data", "qualname": "DwdData.station_data", "kind": "variable", "doc": "<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n"}, {"fullname": "weather_display.dwd_data.DwdData.get_station_data", "modulename": "weather_display.dwd_data", "qualname": "DwdData.get_station_data", "kind": "function", "doc": "<p>Method that retrieves the current weather data for the station\nspecified by the saved station from the DWD-API.\nThe recieved data is returned in form of a deserialized json file.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by the station. An empty dictionary\n    is returned if their is no data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_data.DwdData.get_display_data", "modulename": "weather_display.dwd_data", "qualname": "DwdData.get_display_data", "kind": "function", "doc": "<p>Method that extracts the weather data that will be displayed from\nthe saved station and station_data. The data used for display is\nreturned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data for the given\n    station formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_data.DwdData.update", "modulename": "weather_display.dwd_data", "qualname": "DwdData.update", "kind": "function", "doc": "<p>Method that updates or retrieves the station_data from the DWD-API with\nthe informations saved in station.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the update process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations", "modulename": "weather_display.dwd_stations", "kind": "module", "doc": "<p>The dwd_stations module contains the DwdStations class that is used to retrieve\nall stations listed on the corresponding DWD website and to convert the table\nto a processable json file. The class handles all needed request and I/O processes.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations", "kind": "class", "doc": "<p>Class that contains all methods and data necessary to retrieve the latest\nDWD stations table. The stations table is saved to a json file and is\nupdated after the set amount of time.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.__init__", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.__init__", "kind": "function", "doc": "<p>Constructor for the DwdStations objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n\n<p>refresh (int):\n    Refresh time in hours for the saved json file.\n    Default value is 24 hours.</p>\n\n<p>file_name (str):\n    File name for the json file with all station data.\n    Default name is dwd_stations.json.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"mi\">24</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;dwd_stations.json&#39;</span></span>)</span>"}, {"fullname": "weather_display.dwd_stations.DwdStations.url", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url pointing to the location of the table with all stations\n    and their corresponding informations.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.params", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.params", "kind": "variable", "doc": "<p>params (dict[str, str]):\n    Dictionary with all url parameters for the request.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.headers", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.headers", "kind": "variable", "doc": "<p>headers (dict[str, str]):\n    Dictionary with all header parameters for the request.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.attempts", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.attempts", "kind": "variable", "doc": "<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.timeout", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.timeout", "kind": "variable", "doc": "<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.refresh", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.refresh", "kind": "variable", "doc": "<p>refresh (int):\n    Refresh time in hours for the saved json file.\n    Default value is 24 hours.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.file_name", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.file_name", "kind": "variable", "doc": "<p>file_name (str):\n    File name for the json file with all station data.\n    Default name is dwd_stations.json.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.table_entries", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.table_entries", "kind": "variable", "doc": "<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.\n    The dictionary uses the station names as keys and the\n    corresponding values are dictionaries filled with the\n    additional station informations.</p>\n"}, {"fullname": "weather_display.dwd_stations.DwdStations.process_stations_page", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.process_stations_page", "kind": "function", "doc": "<p>Method that processes the response content of a request to the\nstandard url and returns a formatted dictionary of the stations\nnames with their informations.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.get_stations_page", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.get_stations_page", "kind": "function", "doc": "<p>Method that triggers a get request for the standard url and\nhandles all possible error cases.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>response (Optional[Response]):\n    The response object of the request to the standard url or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.get_table_entries", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.get_table_entries", "kind": "function", "doc": "<p>Method that triggers a request to the standard url and processes the\ndata in the response by using the already defined methods.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.\n    With no data an empty dictionary is returned.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.get_station_by_name", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.get_station_by_name", "kind": "function", "doc": "<p>Method that searches a station identified by its name in the\nsaved stations table and returns the informations of the station\nin form of a Station object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station_name (str):\n    The name of the searched station.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station (Station):\n    A Station object containing all informations of the station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">station_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.get_station_by_distance", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.get_station_by_distance", "kind": "function", "doc": "<p>Method that searches the station closest to the current position which\nis represented by the latitude and longitude value. The informations\nof the closest station with hourly measurements are returned.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>latitude (float):\n    The current geographic latitude.</p>\n\n<p>longitude (float):\n    The current geographic longitude.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station (Station):\n    A Station object containing all informations of the station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.save_table_as_json", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.save_table_as_json", "kind": "function", "doc": "<p>Method that saves the given table entries to a json file\nwith the set file name. The file is placed in the data directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the save process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_entries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.load_table_from_json", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.load_table_from_json", "kind": "function", "doc": "<p>Method that loads the table entries from a json file with the\nset file name. The file needs to be in the data directory.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table\n    or an empty dictionary if no data could be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.dwd_stations.DwdStations.update", "modulename": "weather_display.dwd_stations", "qualname": "DwdStations.update", "kind": "function", "doc": "<p>Method that updates or retrieves the stations table by checking the\ncurrent data and calling all neccessary methods for the update.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the update process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models", "modulename": "weather_display.models", "kind": "module", "doc": "<h1 id=\"description-of-the-models-sub-package\">Description of the models sub-package</h1>\n\n<p>The models package is a sub-package of the weather_display package and\ncontains all modules and classes that represent specific data structures\nused by the weather_display package.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.models.display_data", "modulename": "weather_display.models.display_data", "kind": "module", "doc": "<p>The display_data module contains the DisplayData class that is used to store and\nprocess the weather data that will be displayed by using the different methods\nof the Display class. Additional it stores mapping dictionaries to convert\ndata to strings that are human readable.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData", "modulename": "weather_display.models.display_data", "qualname": "DisplayData", "kind": "class", "doc": "<p>Class that contains the different parts of the weather data that will be\ndisplayed by the Display class methods. The data is gathered by the\nother Data classes available in the package. An additional mapping\ndictionary is stored as well.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.__init__", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.__init__", "kind": "function", "doc": "<p>Constructor for the DisplayData objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station_name (str):\n    Name of the weather station. Default value is Error.</p>\n\n<p>date_time (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data. Default value is None.</p>\n\n<p>temperature (float):\n    The temperature in degree celsius. Default value is NAN.</p>\n\n<p>forecast (int):\n    A number representing the weather forecast of the day.\n    Default value is 0.</p>\n\n<p>daily_min (float):\n    Minimum temperature of the day in degree celsius.\n    Default value is NAN.</p>\n\n<p>daily_max (float):\n    Maximum temperature of the day in degree celsius.\n    Default value is NAN.</p>\n\n<p>dew_point (float):\n    The dew point in degree celsius. Default value is NAN.</p>\n\n<p>precipitation (float):\n    The current precipitation in millimeter.\n    Default value is NAN.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">station_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">daily_min</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">daily_max</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">dew_point</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">precipitation</span><span class=\"o\">=</span><span class=\"n\">nan</span></span>)</span>"}, {"fullname": "weather_display.models.display_data.DisplayData.DATE_FORMAT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.DATE_FORMAT", "kind": "variable", "doc": "<p>DATE_FORMAT (tuple[str, str]):\n    A tuple defining the date format and default output string for the format.</p>\n", "default_value": "(&#x27;%a., %d.%m.%Y&#x27;, &#x27;Thu., 01.01.1970&#x27;)"}, {"fullname": "weather_display.models.display_data.DisplayData.TIME_FORMAT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.TIME_FORMAT", "kind": "variable", "doc": "<p>TIME_FORMAT (tuple[str, str]):\n    A tuple defining the time format and default output string for the format.</p>\n", "default_value": "(&#x27;%H:%M&#x27;, &#x27;00:00&#x27;)"}, {"fullname": "weather_display.models.display_data.DisplayData.ICON_DICT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.ICON_DICT", "kind": "variable", "doc": "<p>ICON_DICT (dict[int, str]):\n    A dictionary that contains the mapping of forecast icon numbers\n    to human readable string representations.</p>\n", "default_value": "{1: &#x27;sun&#x27;, 2: &#x27;sun, slightly cloudy&#x27;, 3: &#x27;sun, cloudy&#x27;, 4: &#x27;clouds&#x27;, 5: &#x27;fog&#x27;, 6: &#x27;fog, risk of slipping&#x27;, 7: &#x27;light rain&#x27;, 8: &#x27;rain&#x27;, 9: &#x27;heavy rain&#x27;, 10: &#x27;light rain, risk of slipping&#x27;, 11: &#x27;heavy rain, risk of slipping&#x27;, 12: &#x27;rain, sporadic snowfall&#x27;, 13: &#x27;rain, increased snowfall&#x27;, 14: &#x27;light snowfall&#x27;, 15: &#x27;snowfall&#x27;, 16: &#x27;heavy snowfall&#x27;, 17: &#x27;clouds, hail&#x27;, 18: &#x27;sun, light rain&#x27;, 19: &#x27;sun, heavy rain&#x27;, 20: &#x27;sun, rain, sporadic snowfall&#x27;, 21: &#x27;sun, rain, increased snowfall&#x27;, 22: &#x27;sun, sporadic snowfall&#x27;, 23: &#x27;sun, increased snowfall&#x27;, 24: &#x27;sun, hail&#x27;, 25: &#x27;sun, heavy hail&#x27;, 26: &#x27;thunderstorm&#x27;, 27: &#x27;thunderstorm, rain&#x27;, 28: &#x27;thunderstorm, heavy rain&#x27;, 29: &#x27;thunderstorm, hail&#x27;, 30: &#x27;thunderstorm, heavy hail&#x27;, 31: &#x27;wind&#x27;}"}, {"fullname": "weather_display.models.display_data.DisplayData.station_name", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.station_name", "kind": "variable", "doc": "<p>station_name (str):\n    Name of the weather station.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.date_time", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.date_time", "kind": "variable", "doc": "<p>date_time (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.formatted_date", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.formatted_date", "kind": "variable", "doc": "<p>formatted_date (str):\n    A formatted date representation of the date_time object.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.formatted_time", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.formatted_time", "kind": "variable", "doc": "<p>formatted_time (str):\n    A formatted time representation of the date_time object.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.temperature", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.temperature", "kind": "variable", "doc": "<p>temperature (float):\n    The temperature in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.forecast", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.forecast", "kind": "variable", "doc": "<p>forecast (int):\n    A number representing the weather forecast of the day.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.formatted_forecast", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.formatted_forecast", "kind": "variable", "doc": "<p>formatted_forecast (str):\n    A formatted string representing the weather forecast of the day.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.daily_min", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.daily_min", "kind": "variable", "doc": "<p>daily_min (float):\n    Minimum temperature of the day in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.daily_max", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.daily_max", "kind": "variable", "doc": "<p>daily_max (float):\n    Maximum temperature of the day in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.dew_point", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.dew_point", "kind": "variable", "doc": "<p>dew_point (float):\n    The dew point in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.precipitation", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.precipitation", "kind": "variable", "doc": "<p>precipitation (float):\n    The current precipitation in millimeter.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.create_formatted_date", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.create_formatted_date", "kind": "function", "doc": "<p>Method that uses the class constant DATE_FORMAT to convert the\ngiven datetime object to formatted date string.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dto (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_date (str):\n    A formatted date representation of the datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dto</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.display_data.DisplayData.create_formatted_time", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.create_formatted_time", "kind": "function", "doc": "<p>Method that uses the class constant TIME_FORMAT to convert the\ngiven datetime object to formatted time string.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dto (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_time (str):\n    A formatted time representation of the datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">dto</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.display_data.DisplayData.create_formatted_forecast", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.create_formatted_forecast", "kind": "function", "doc": "<p>Method that converts the forecast number to a human readable string\nby using the ICON_DICT dictionary.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>forecast (int):\n    A number representing the weather forecast of the day.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_forecast (str):\n    A formatted string representing the weather forecast of the day.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">forecast</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.station", "modulename": "weather_display.models.station", "kind": "module", "doc": "<p>The station module contains the station class that holds all informations\nof a weather station.</p>\n"}, {"fullname": "weather_display.models.station.Station", "modulename": "weather_display.models.station", "qualname": "Station", "kind": "class", "doc": "<p>Class that contains all informations of a weather station.</p>\n"}, {"fullname": "weather_display.models.station.Station.__init__", "modulename": "weather_display.models.station", "qualname": "Station.__init__", "kind": "function", "doc": "<p>Constructor for the Station objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name (str):\n    Name of the station.</p>\n\n<p>number (int):\n    Number of the station. Default value is 0.</p>\n\n<p>type (str):\n    Type of the station. Default value is the empty string.</p>\n\n<p>identifier (str):\n    Identifier of the station. Default value is the empty string.</p>\n\n<p>latitude (float):\n    Latitude of the station. Default value is 0.0.</p>\n\n<p>longitude (float):\n    Longitude of the station. Default value is 0.0.</p>\n\n<p>altitude (int):\n    Altitude of the station in meters over normal zero.\n    Default value is 0.</p>\n\n<p>river_basin (str):\n    River basin near the station. Default value is the empty string.</p>\n\n<p>state (str):\n    State in which the station stands. Default value is the empty string.</p>\n\n<p>start (Optional[datetime]):\n    The start date of the data set. Default value is None.</p>\n\n<p>end (Optional[datetime]):\n    The end date of the data set. Default value is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">&#39;0&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">river_basin</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "weather_display.models.station.Station.name", "modulename": "weather_display.models.station", "qualname": "Station.name", "kind": "variable", "doc": "<p>name (str):\n    Name of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.number", "modulename": "weather_display.models.station", "qualname": "Station.number", "kind": "variable", "doc": "<p>number (int):\n    Number of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.type", "modulename": "weather_display.models.station", "qualname": "Station.type", "kind": "variable", "doc": "<p>type (str):\n    Type of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.identifier", "modulename": "weather_display.models.station", "qualname": "Station.identifier", "kind": "variable", "doc": "<p>identifier (str):\n    Identifier of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.latitude", "modulename": "weather_display.models.station", "qualname": "Station.latitude", "kind": "variable", "doc": "<p>latitude (float):\n    Latitude of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.longitude", "modulename": "weather_display.models.station", "qualname": "Station.longitude", "kind": "variable", "doc": "<p>longitude (float):\n    Longitude of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.altitude", "modulename": "weather_display.models.station", "qualname": "Station.altitude", "kind": "variable", "doc": "<p>altitude (int):\n    Altitude of the station in meter over normal zero.</p>\n"}, {"fullname": "weather_display.models.station.Station.river_basin", "modulename": "weather_display.models.station", "qualname": "Station.river_basin", "kind": "variable", "doc": "<p>river_basin (str):\n    River basin near the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.state", "modulename": "weather_display.models.station", "qualname": "Station.state", "kind": "variable", "doc": "<p>state (str):\n    State in which the station stands.</p>\n"}, {"fullname": "weather_display.models.station.Station.start", "modulename": "weather_display.models.station", "qualname": "Station.start", "kind": "variable", "doc": "<p>start (Optional[datetime]):\n    The start date of the data set.</p>\n"}, {"fullname": "weather_display.models.station.Station.end", "modulename": "weather_display.models.station", "qualname": "Station.end", "kind": "variable", "doc": "<p>end (Optional[datetime]):\n    The end date of the data set.</p>\n"}, {"fullname": "weather_display.start", "modulename": "weather_display.start", "kind": "module", "doc": "<p>The start module contains the main function of the weather_display package\nand can be used as an entry point script for the package.</p>\n"}, {"fullname": "weather_display.start.main", "modulename": "weather_display.start", "qualname": "main", "kind": "function", "doc": "<p>Main function of the weather_display package and command line script.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();