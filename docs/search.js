window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "weather_display", "modulename": "weather_display", "kind": "module", "doc": "<h1 id=\"description-of-the-weather_display-package\">Description of the weather_display package</h1>\n\n<p>The weather_display package contains all modules and classes related to\nthe gain, storage and display of weather data from different sources.</p>\n\n<h1 id=\"dependencies-and-installation\">Dependencies and installation</h1>\n\n<p>The weather_display package depends on a Python Version &gt;= 3.9 and all\ndependencies that are listed in the <code>requirements.txt</code> file.</p>\n\n<p>All dependencies can be installed with pip using the provided\n<code>requirements.txt</code> and the command <code>pip install -r requirements.txt</code>.</p>\n\n<h1 id=\"usage\">Usage</h1>\n\n<p>The weather_display package can be executed directly with the\ncommand <code>python -m weather_display</code> from its parent directory.</p>\n\n<h1 id=\"further-remarks\">Further remarks</h1>\n\n<p>Generating a documentation in HTML format can be achieved by using\n<code>pdoc</code> and the following commands, issued in the weather_display parent\ndirectory: <code>pdoc weather_display -o docs</code>.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.collectors", "modulename": "weather_display.collectors", "kind": "module", "doc": "<h1 id=\"description-of-the-collectors-sub-package\">Description of the collectors sub-package</h1>\n\n<p>The collectors package is a sub-package of the weather_display package and\ncontains all modules and classes that are responsible for the collection\nof weather and station data from different sources. The collected weather data\nis used by the modules and classes of the weather_display package.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.collectors.collector", "modulename": "weather_display.collectors.collector", "kind": "module", "doc": "<p>The collector module contains the Collector class that bundles and initializes\nthe different data sources. The collector provides methods to gather and\nupdate data contained in the different data sources.</p>\n"}, {"fullname": "weather_display.collectors.collector.Collector", "modulename": "weather_display.collectors.collector", "qualname": "Collector", "kind": "class", "doc": "<p>The Collector class provides methods to gather and update\ndata contained in the different data sources. It can initialize all\ndata sources or only some selected sources.</p>\n"}, {"fullname": "weather_display.collectors.collector.Collector.__init__", "modulename": "weather_display.collectors.collector", "qualname": "Collector.__init__", "kind": "function", "doc": "<p>Constructor for the Collector objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>stations (Optional[dict[str, Station]]):\n    A dictionary containing the different stations used for the\n    initialization of the data sources labeled with the associated\n    data source name.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stations</span></span>)</span>"}, {"fullname": "weather_display.collectors.collector.Collector.SOURCES", "modulename": "weather_display.collectors.collector", "qualname": "Collector.SOURCES", "kind": "variable", "doc": "<p>SOURCES (tuple[str, str, str]):\n    A tuple containing the names of available data sources.</p>\n", "default_value": "(&#x27;dwd&#x27;, &#x27;w24&#x27;, &#x27;won&#x27;)"}, {"fullname": "weather_display.collectors.collector.Collector.data_sources", "modulename": "weather_display.collectors.collector", "qualname": "Collector.data_sources", "kind": "variable", "doc": "<p>data_sources (dict[str, Data]):\n    A dictionary containing the initialized data sources labeled\n    with the associated data source name. Default value is the empty\n    dictionary.</p>\n"}, {"fullname": "weather_display.collectors.collector.Collector.is_updated", "modulename": "weather_display.collectors.collector", "qualname": "Collector.is_updated", "kind": "variable", "doc": "<p>is_updated (bool):\n    Combined status of the last update method calls.\n    Default value is False.</p>\n"}, {"fullname": "weather_display.collectors.collector.Collector.combine_display_data", "modulename": "weather_display.collectors.collector", "qualname": "Collector.combine_display_data", "kind": "function", "doc": "<p>Method that updates the result DisplayData object with new data of\nthe new DisplayData object if it does not match the default data\nin a default DisplayData object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>dd_res (DisplayData):\n    DisplayData object with the current result data.</p>\n\n<p>dd_new (DisplayData):\n    DisplayData object with the new data.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dd_res (DisplayData):\n    The updated result DisplayData object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dd_res</span>, </span><span class=\"param\"><span class=\"n\">dd_new</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.collector.Collector.get_display_data", "modulename": "weather_display.collectors.collector", "qualname": "Collector.get_display_data", "kind": "function", "doc": "<p>Method that gets the weather data that will be displayed from\nthe different data sources. The combined data of all data sources\nis returned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data from all\n    data sources formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.collector.Collector.update", "modulename": "weather_display.collectors.collector", "qualname": "Collector.update", "kind": "function", "doc": "<p>Method that updates the station_data of all data sources by calling\nthe associated update method of the sources. It also saves the combined\nsuccess status of the updates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data", "modulename": "weather_display.collectors.data", "kind": "module", "doc": "<p>The data module contains the Data abstract base class that is used as\na prototype with all common methods for the specialized data classes.</p>\n"}, {"fullname": "weather_display.collectors.data.Data", "modulename": "weather_display.collectors.data", "qualname": "Data", "kind": "class", "doc": "<p>Abstract base class that contains all common methods and method prototypes\nfor the specialized data classes.</p>\n", "bases": "abc.ABC"}, {"fullname": "weather_display.collectors.data.Data.__init__", "modulename": "weather_display.collectors.data", "qualname": "Data.__init__", "kind": "function", "doc": "<p>Constructor for the Data objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station (Station):\n    Station object containing all informations of the station.</p>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">station</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "weather_display.collectors.data.Data.station", "modulename": "weather_display.collectors.data", "qualname": "Data.station", "kind": "variable", "doc": "<p>station (Station):\n    Station object containing all informations of the station.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.attempts", "modulename": "weather_display.collectors.data", "qualname": "Data.attempts", "kind": "variable", "doc": "<p>attempts (int):\n    Number of connection attempts.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.url", "modulename": "weather_display.collectors.data", "qualname": "Data.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url for the get requests.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.params", "modulename": "weather_display.collectors.data", "qualname": "Data.params", "kind": "variable", "doc": "<p>params (Optional[dict[str, str]]):\n    Dictionary with all parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.headers", "modulename": "weather_display.collectors.data", "qualname": "Data.headers", "kind": "variable", "doc": "<p>headers (Optional[dict[str, str]]):\n    Dictionary with all header parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.timeout", "modulename": "weather_display.collectors.data", "qualname": "Data.timeout", "kind": "variable", "doc": "<p>timeout (int):\n    Connection timeout for a server answer in seconds.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.station_data", "modulename": "weather_display.collectors.data", "qualname": "Data.station_data", "kind": "variable", "doc": "<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n"}, {"fullname": "weather_display.collectors.data.Data.calc_dew_point", "modulename": "weather_display.collectors.data", "qualname": "Data.calc_dew_point", "kind": "function", "doc": "<p>Method that calculates the dew point for a given humidity and temperature.\nFor the calculation an approximation formula based on the Magnus formula\nwith empirically determined parameters is used. The formula is enhanced\nusing the Boegel modification in form of the Arden Buck equation.\nThe equation is usable between -80 degree Celsius and +50 degree Celsius.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>humidity (float):\n    The relative humidity of the air in percent.</p>\n\n<p>temperature (float):\n    The current temperature in degree Celsius.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>dew_point (float):\n    The calculated dew point in degree Celsius for the given\n    relative humidity and temperature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">humidity</span>, </span><span class=\"param\"><span class=\"n\">temperature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data.Data.get_station_response", "modulename": "weather_display.collectors.data", "qualname": "Data.get_station_response", "kind": "function", "doc": "<p>Method that triggers a get request to the standard url with the set\nparameters, headers and timeout. The method handles all possible\nerror cases.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_response (Optional[Response]):\n    The response object of the request to the standard url with the\n    set parameters and headers or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data.Data.get_station_data", "modulename": "weather_display.collectors.data", "qualname": "Data.get_station_data", "kind": "function", "doc": "<p>Method that processes the response of a request to the\nstandard url with set parameters and headers. It returns\na formatted dictionary of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    with the set parameters and headers or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data.Data.get_display_data", "modulename": "weather_display.collectors.data", "qualname": "Data.get_display_data", "kind": "function", "doc": "<p>Method that extracts the weather data that will be displayed from\nthe saved station and station_data. The data used for display is\nreturned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data for the set\n    station formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data.Data.update", "modulename": "weather_display.collectors.data", "qualname": "Data.update", "kind": "function", "doc": "<p>Method that updates the station_data with data from the standard url\nusing the set parameters and headers. If the specified station is\nnot available then the current data is not overwritten.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the update process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_dwd", "modulename": "weather_display.collectors.data_dwd", "kind": "module", "doc": "<p>The data_dwd module contains the DataDWD class that is used to make all direct calls\nto the DWD-API, save the received data and preprocess the received data for display\npurposes.</p>\n"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD", "kind": "class", "doc": "<p>Class that contains the DWD-API base url and stores the station informations\nused for the data requests. It stores the received data for later use or display.</p>\n", "bases": "weather_display.collectors.data.Data"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.__init__", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.__init__", "kind": "function", "doc": "<p>Constructor for the DwdData objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station (Station):\n    Station object containing all informations of the station.</p>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">station</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.url", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url for the get requests.</p>\n"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.params", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.params", "kind": "variable", "doc": "<p>params (Optional[dict[str, str]]):\n    Dictionary with all parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.headers", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.headers", "kind": "variable", "doc": "<p>headers (Optional[dict[str, str]]):\n    Dictionary with all header parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.get_station_data", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.get_station_data", "kind": "function", "doc": "<p>Method that processes the response of a request to the\nstandard url with set parameters and headers. It returns\na formatted dictionary of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    with the set parameters and headers or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_dwd.DataDWD.get_display_data", "modulename": "weather_display.collectors.data_dwd", "qualname": "DataDWD.get_display_data", "kind": "function", "doc": "<p>Method that extracts the weather data that will be displayed from\nthe saved station and station_data. The data used for display is\nreturned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data for the set\n    station formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_w24", "modulename": "weather_display.collectors.data_w24", "kind": "module", "doc": "<p>The data_w24 module contains the DataW24 class that is used to download and parse\nthe wetter24 website, save the data and preprocess the extracted data for display purposes.</p>\n"}, {"fullname": "weather_display.collectors.data_w24.DataW24", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24", "kind": "class", "doc": "<p>Class that contains the wetter24 base url and stores the station informations\nused for the website requests. It stores the received data for later use or display.</p>\n", "bases": "weather_display.collectors.data.Data"}, {"fullname": "weather_display.collectors.data_w24.DataW24.__init__", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.__init__", "kind": "function", "doc": "<p>Constructor for the DataW24 objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station (Station):\n    Station object containing all informations of the station.</p>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">station</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "weather_display.collectors.data_w24.DataW24.url", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url for the get requests.</p>\n"}, {"fullname": "weather_display.collectors.data_w24.DataW24.params", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.params", "kind": "variable", "doc": "<p>params (Optional[dict[str, str]]):\n    Dictionary with all parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_w24.DataW24.headers", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.headers", "kind": "variable", "doc": "<p>headers (Optional[dict[str, str]]):\n    Dictionary with all header parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_w24.DataW24.get_station_data", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.get_station_data", "kind": "function", "doc": "<p>Method that processes the response of a request to the\nstandard url with set parameters and headers. It returns\na formatted dictionary of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    with the set parameters and headers or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_w24.DataW24.get_display_data", "modulename": "weather_display.collectors.data_w24", "qualname": "DataW24.get_display_data", "kind": "function", "doc": "<p>Method that extracts the weather data that will be displayed from\nthe saved station and station_data. The data used for display is\nreturned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data for the set\n    station formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won", "modulename": "weather_display.collectors.data_won", "kind": "module", "doc": "<p>The data_won module contains the DataWon class that is used to download and parse\nthe wetteronline website, save the data and preprocess the extracted data for\ndisplay purposes.</p>\n"}, {"fullname": "weather_display.collectors.data_won.DataWon", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon", "kind": "class", "doc": "<p>Class that contains the wetteronline base url and stores the station informations\nused for the website requests. It stores the received data for later use or display.</p>\n", "bases": "weather_display.collectors.data.Data"}, {"fullname": "weather_display.collectors.data_won.DataWon.__init__", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.__init__", "kind": "function", "doc": "<p>Constructor for the DataWon objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station (Station):\n    Station object containing all informations of the station.</p>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">station</span>, </span><span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span></span>)</span>"}, {"fullname": "weather_display.collectors.data_won.DataWon.url", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url for the get requests.</p>\n"}, {"fullname": "weather_display.collectors.data_won.DataWon.params", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.params", "kind": "variable", "doc": "<p>params (Optional[dict[str, str]]):\n    Dictionary with all parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_won.DataWon.headers", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.headers", "kind": "variable", "doc": "<p>headers (Optional[dict[str, str]]):\n    Dictionary with all header parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.data_won.DataWon.convert_datetime_string", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.convert_datetime_string", "kind": "function", "doc": "<p>Method that converts a given date and time from its string representation\nto a datetime object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>date_time (str):\n    A string that contains a date and a time.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>date_time (datetime):\n    A new datetime object with the given date and time or\n    the epoch as datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_time</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won.DataWon.convert_temperature_string", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.convert_temperature_string", "kind": "function", "doc": "<p>Method that converts a given temperature string to its float representation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>temperature (str):\n    A string that contains the temperature with its unit.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>temperature (float):\n    A float number representing the given temperature.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">temperature</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won.DataWon.convert_humidity_string", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.convert_humidity_string", "kind": "function", "doc": "<p>Method that converts a given humidity string to its float representation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>humidity (str):\n    A string that contains the humidity with its unit.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>humidity (float):\n    A float number representing the given humidity.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">humidity</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won.DataWon.convert_precipitation_string", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.convert_precipitation_string", "kind": "function", "doc": "<p>Method that converts a given precipitation string to its float representation.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>precipitation (str):\n    A string that contains the precipitation with its unit.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>precipitation (float):\n    A float number representing the given precipitation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">precipitation</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won.DataWon.get_station_data", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.get_station_data", "kind": "function", "doc": "<p>Method that processes the response of a request to the\nstandard url with set parameters and headers. It returns\na formatted dictionary of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    with the set parameters and headers or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station_data (dict):\n    A dictionary containing all current weather data from the\n    station specified by station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.data_won.DataWon.get_display_data", "modulename": "weather_display.collectors.data_won", "qualname": "DataWon.get_display_data", "kind": "function", "doc": "<p>Method that extracts the weather data that will be displayed from\nthe saved station and station_data. The data used for display is\nreturned in a new DisplayData object.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data for the set\n    station formatted for display purposes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd", "modulename": "weather_display.collectors.stations_dwd", "kind": "module", "doc": "<p>The stations_dwd module contains the StationsDWD class that is used to retrieve\nall stations listed on the corresponding DWD website and to convert the table\nto a processable json file. The class handles all needed request and I/O processes.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD", "kind": "class", "doc": "<p>Class that contains all methods and data necessary to retrieve the latest\nDWD stations table. The stations table is saved to a json file and is\nupdated after the set amount of time.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.__init__", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.__init__", "kind": "function", "doc": "<p>Constructor for the StationsDWD objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>attempts (int):\n    Number of connection attempts. Default value is 3.</p>\n\n<p>timeout (int):\n    Connection timeout for a server answer in seconds.\n    Default value is 10 seconds.</p>\n\n<p>refresh (int):\n    Refresh time in days for the saved json file.\n    Default value is 7 days.</p>\n\n<p>file_name (str):\n    File name for the json file with all station data.\n    Default name is stations_dwd.json.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">attempts</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">refresh</span><span class=\"o\">=</span><span class=\"mi\">7</span>, </span><span class=\"param\"><span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;stations_dwd.json&#39;</span></span>)</span>"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.attempts", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.attempts", "kind": "variable", "doc": "<p>attempts (int):\n    Number of connection attempts.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.url", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.url", "kind": "variable", "doc": "<p>url (str):\n    Standard url pointing to the location of the table with all stations\n    and their corresponding informations.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.params", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.params", "kind": "variable", "doc": "<p>params (dict[str, str]):\n    Dictionary with all parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.headers", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.headers", "kind": "variable", "doc": "<p>headers (dict[str, str]):\n    Dictionary with all header parameters for the get request.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.timeout", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.timeout", "kind": "variable", "doc": "<p>timeout (int):\n    Connection timeout for a server answer in seconds.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.refresh", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.refresh", "kind": "variable", "doc": "<p>refresh (int):\n    Refresh time in days for the saved json file.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.file_name", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.file_name", "kind": "variable", "doc": "<p>file_name (str):\n    File name for the json file with all station data.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.table_entries", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.table_entries", "kind": "variable", "doc": "<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.\n    The dictionary uses the station names as keys and the\n    corresponding values are dictionaries filled with the\n    additional station informations.</p>\n"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.get_table_response", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.get_table_response", "kind": "function", "doc": "<p>Method that triggers a get request to the standard url with the set\nparameters, headers and timeout. The method handles all possible\nerror cases.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_response (Optional[Response]):\n    The response object of the request to the standard url with the\n    set parameters and headers or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.get_table_entries", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.get_table_entries", "kind": "function", "doc": "<p>Method that processes the response of a request to the\nstandard url with set parameters and headers. It returns\na formatted dictionary of the data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>response (Optional[Response]):\n    A response object retrieved from a request to the standard url\n    with the set parameters and headers or None.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.get_station_by_name", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.get_station_by_name", "kind": "function", "doc": "<p>Method that searches a station identified by its name in the\nsaved stations table and returns the informations of the station\nin form of a Station object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station_name (str):\n    The name of the searched station.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station (Station):\n    A Station object containing all informations of the station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">station_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.get_station_by_distance", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.get_station_by_distance", "kind": "function", "doc": "<p>Method that searches the station closest to the current position which\nis represented by the latitude and longitude value. The informations\nof the closest station with hourly measurements are returned.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>latitude (float):\n    The current geographic latitude.</p>\n\n<p>longitude (float):\n    The current geographic longitude.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station (Station):\n    A Station object containing all informations of the station.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">latitude</span>, </span><span class=\"param\"><span class=\"n\">longitude</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.save_table_as_json", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.save_table_as_json", "kind": "function", "doc": "<p>Method that saves the given table entries to a json file\nwith the set file name. The file is placed in the data directory.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the save process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_entries</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.load_table_from_json", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.load_table_from_json", "kind": "function", "doc": "<p>Method that loads the table entries from a json file with the\nset file name. The file needs to be in the data directory.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>table_entries (dict[str, dict[str, str]]):\n    A dictionary containing all stations from the stations table\n    or an empty dictionary if no data could be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.collectors.stations_dwd.StationsDWD.update", "modulename": "weather_display.collectors.stations_dwd", "qualname": "StationsDWD.update", "kind": "function", "doc": "<p>Method that updates or retrieves the stations table by checking the\ncurrent data and calling all neccessary methods for the update.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (bool):\n    Indicates whether the update process was a success or not.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays", "modulename": "weather_display.displays", "kind": "module", "doc": "<h1 id=\"description-of-the-displays-sub-package\">Description of the displays sub-package</h1>\n\n<p>The displays package is a sub-package of the weather_display package and\ncontains all modules and classes that are responsible for the configuration\nand control of the different displays. The different displays are used\nto show the gathered weather data. Weather data can be gathered with the\nmodules and classes of the collectors sub-package.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.displays.display", "modulename": "weather_display.displays.display", "kind": "module", "doc": "<p>The display module contains the Display class that is responsible for displaying\nweather data handed to the class or its methods on the selected output channel.\nThe weather data is formatted to align with the chosen output channel.\nThe Display class imports all available displays for the output of data.\nIt functions as a virtual main display.</p>\n"}, {"fullname": "weather_display.displays.display.Display", "modulename": "weather_display.displays.display", "qualname": "Display", "kind": "class", "doc": "<p>Class that contains the configuration for different output channels.\nThe methods of the class can be used to display DisplayData objects\non the selected output channel with the set options.</p>\n"}, {"fullname": "weather_display.displays.display.Display.__init__", "modulename": "weather_display.displays.display", "qualname": "Display.__init__", "kind": "function", "doc": "<p>Constructor for the Display objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>output (int):\n    A number representing the chosen output channel.\n    Default value is 0 representing the console output.</p>\n\n<p>dark_mode (bool):\n    A boolean that indicates whether the dark mode is\n    active or not. The default value is False.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">dark_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "weather_display.displays.display.Display.OUTPUTS", "modulename": "weather_display.displays.display", "qualname": "Display.OUTPUTS", "kind": "variable", "doc": "<p>OUTPUTS (tuple[int, int]):\n    A tuple containing the numbers of available output channels.\n    Zero stands for the default console output.</p>\n", "default_value": "(0, 1)"}, {"fullname": "weather_display.displays.display.Display.output", "modulename": "weather_display.displays.display", "qualname": "Display.output", "kind": "variable", "doc": "<p>output (int):\n    A number representing the chosen output channel.</p>\n"}, {"fullname": "weather_display.displays.display.Display.dark_mode", "modulename": "weather_display.displays.display", "qualname": "Display.dark_mode", "kind": "variable", "doc": "<p>dark_mode (bool):\n    A boolean that indicates whether the dark mode is\n    active or not.</p>\n"}, {"fullname": "weather_display.displays.display.Display.font", "modulename": "weather_display.displays.display", "qualname": "Display.font", "kind": "variable", "doc": "<p>font (Optional[Any]):\n    The font used in the generation of images for the\n    LCD display. The default font is None.</p>\n"}, {"fullname": "weather_display.displays.display.Display.lcd_con", "modulename": "weather_display.displays.display", "qualname": "Display.lcd_con", "kind": "variable", "doc": "<p>lcd_con (Optional[LCD144Controller]):\n    Controller of the 1.44inch LCD HAT SPI interface from Waveshare.\n    The default controller is None.</p>\n"}, {"fullname": "weather_display.displays.display.Display.load_default_font", "modulename": "weather_display.displays.display", "qualname": "Display.load_default_font", "kind": "function", "doc": "<p>Method that loads the set default font with a default font size.\nIf the font can not be loaded then None is returned.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>font (Optional[Any]):\n    The loaded font or None.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.display.Display.create_data_image_128_128", "modulename": "weather_display.displays.display", "qualname": "Display.create_data_image_128_128", "kind": "function", "doc": "<p>Method that creates an image of 128 x 128 pixel that contains the data\nof the given DisplayData object.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the image.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>image (Image):\n    Created image that contains all data of the DisplayData object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.display.Display.output_to_console", "modulename": "weather_display.displays.display", "qualname": "Display.output_to_console", "kind": "function", "doc": "<p>Method that outputs the weather data contained in the DisplayData object\nto the console with the configurated settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the console.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.display.Display.output_to_display", "modulename": "weather_display.displays.display", "qualname": "Display.output_to_display", "kind": "function", "doc": "<p>Method that outputs the weather data contained in the DisplayData object\nto the display with the configurated settings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the display.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.display.Display.show", "modulename": "weather_display.displays.display", "qualname": "Display.show", "kind": "function", "doc": "<p>Method that tries to show the provided display_data on the configurated\noutput channel. The method automatically chooses the correct output function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>display_data (DisplayData):\n    A DisplayData object containing all weather data to be shown on\n    the configurated output channel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">display_data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.display.Display.exit", "modulename": "weather_display.displays.display", "qualname": "Display.exit", "kind": "function", "doc": "<p>Method that exits all used displays and controllers. The method\nperforms the necessary cleanup actions to correctly exit the displays.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144", "modulename": "weather_display.displays.lcd_144", "kind": "module", "doc": "<p>The lcd_144 module contains the LCD144 class that is responsible for all input,\noutput and setting methods for the 1.44inch LCD HAT SPI interface from Waveshare.</p>\n\n<p>Functions with the ST7735S chip driver to clear the screen, write, draw lines,\ndraw in general and to perform other functions.</p>\n\n<p>MIT License</p>\n\n<p>Copyright (C) July 16, 2018 Yehui from Waveshare</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documnetation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to  whom the Software is\nfurished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144", "kind": "class", "doc": "<p>Class that is responsible for all input, output and setting methods\nfor the 1.44inch LCD HAT SPI interface from Waveshare.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.__init__", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.__init__", "kind": "function", "doc": "<p>Constructor for the LCD144 objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "weather_display.displays.lcd_144.LCD144.config", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.config", "kind": "variable", "doc": "<p>config (LCD144Config):\n    Configurations object for the display.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.width", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.width", "kind": "variable", "doc": "<p>width (int):\n    Width of the display in pixel.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.height", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.height", "kind": "variable", "doc": "<p>height (int):\n    Height of the display in pixel.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.scan_dir", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.scan_dir", "kind": "variable", "doc": "<p>scan_dir (int):\n    Scan direction of the display.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.x_adjust", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.x_adjust", "kind": "variable", "doc": "<p>x_adjust (int):\n    Adjustment in x-direction.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.y_adjust", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.y_adjust", "kind": "variable", "doc": "<p>y_adjust (int):\n    Adjustment in y-direction.</p>\n"}, {"fullname": "weather_display.displays.lcd_144.LCD144.cleanup_GPIO", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.cleanup_GPIO", "kind": "function", "doc": "<p>Method that calls the GPIO cleanup from the LCD144Config class.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.reset", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.reset", "kind": "function", "doc": "<p>Method that performs a hardware reset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.set_backlight", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.set_backlight", "kind": "function", "doc": "<p>Method that turns the LCD backlight on or off.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>is_set (bool):\n    New status of the backlight that determinates whether it is\n    turned on or off.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.set_sleep", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.set_sleep", "kind": "function", "doc": "<p>Method that sets the sleep mode of the LCD to in or out.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>is_set (bool):\n    New status of the LCD sleep mode that determinates whether\n    it is in or out sleep mode.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_set</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.read_key_input", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.read_key_input", "kind": "function", "doc": "<p>Method that returns the input value read from the given key.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>key (int):\n    Number of the pin that is connected to the key.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>data (int):\n    Data read from the given key pin.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.write_reg", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.write_reg", "kind": "function", "doc": "<p>Method that writes register data.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>reg (int):\n    Register data as an integer.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reg</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.write_data_8bit", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.write_data_8bit", "kind": "function", "doc": "<p>Method that writes 8bit data.</p>\n\n<p>data (int):\n    Byte data to write.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.write_data_nlen_16bit", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.write_data_nlen_16bit", "kind": "function", "doc": "<p>Method that writes data with the given length.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data (int):\n    Byte data to write.</p>\n\n<p>data_len (int):\n    Length of the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">data_len</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.init_reg", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.init_reg", "kind": "function", "doc": "<p>Method to initialize the common registers.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.set_gram_scan_way", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.set_gram_scan_way", "kind": "function", "doc": "<p>Method that sets the display scan direction.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>scan_dir (int):\n    Number for the new scan direction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.init_LCD", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.init_LCD", "kind": "function", "doc": "<p>Method that initializes the whole display with the given scan direction\nand activation state of warnings and keys.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>scan_dir (int):\n    Number for the new scan direction.\n    Default value is the default scan direction from the config class.</p>\n\n<p>with_warnings (bool):\n    Sets whether warnings are displayed on the console.\n    Default value is False.</p>\n\n<p>with_keys (bool):\n    Sets whether the keys of the display should be initialized.\n    Default value is False.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (Optional[int]):\n    On failure one is returned and None in all other cases.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scan_dir</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">with_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">with_keys</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.set_windows", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.set_windows", "kind": "function", "doc": "<p>Method that sets the start and end position of the display area.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x_start (int):\n    Start position in x-direction.</p>\n\n<p>y_start (int):\n    Start position in y-direction.</p>\n\n<p>x_end (int):\n    End position in x-direction.</p>\n\n<p>y_end (int):\n    End position in y-direction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x_start</span>, </span><span class=\"param\"><span class=\"n\">y_start</span>, </span><span class=\"param\"><span class=\"n\">x_end</span>, </span><span class=\"param\"><span class=\"n\">y_end</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.clear", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.clear", "kind": "function", "doc": "<p>Method that clears the display.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144.LCD144.show_image", "modulename": "weather_display.displays.lcd_144", "qualname": "LCD144.show_image", "kind": "function", "doc": "<p>Method that shows an image on the display with the already configurated\nsettings.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>image (Any):\n    Image that will be shown on the display.\n    The image needs to match the display size in pixel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_config", "modulename": "weather_display.displays.lcd_144_config", "kind": "module", "doc": "<p>The lcd_144_config module contains the LCD144Config class that is responsible\nfor the basic configuration of the 1.44inch LCD HAT SPI interface from Waveshare.</p>\n\n<p>LCD hardware interface implements (GPIO, SPI)</p>\n\n<p>MIT License</p>\n\n<p>Copyright (C) July 10, 2017 Yehui from Waveshare</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documnetation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to  whom the Software is\nfurished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config", "kind": "class", "doc": "<p>Class that contains all constants and methods to configure the\n1.44inch LCD HAT SPI interface from Waveshare.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.__init__", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.__init__", "kind": "function", "doc": "<p>Constructor for the LCD144Config object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_RST_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_RST_PIN", "kind": "variable", "doc": "<p>LCD_RST_PIN (int):\n    LCD RST pin number.</p>\n", "default_value": "27"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_DC_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_DC_PIN", "kind": "variable", "doc": "<p>LCD_DC_PIN (int):\n    LCD DC pin number.</p>\n", "default_value": "25"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_CS_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_CS_PIN", "kind": "variable", "doc": "<p>LCD_CS_PIN (int):\n    LCD CS pin number.</p>\n", "default_value": "8"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_BL_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_BL_PIN", "kind": "variable", "doc": "<p>LCD_BL_PIN (int):\n    LCD BL pin number.</p>\n", "default_value": "24"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY_UP_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY_UP_PIN", "kind": "variable", "doc": "<p>KEY_UP_PIN (int):\n    Key up pin number.</p>\n", "default_value": "6"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY_DOWN_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY_DOWN_PIN", "kind": "variable", "doc": "<p>KEY_DOWN_PIN (int):\n    Key down pin number.</p>\n", "default_value": "19"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY_LEFT_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY_LEFT_PIN", "kind": "variable", "doc": "<p>KEY_LEFT_PIN (int):\n    Key left pin number.</p>\n", "default_value": "5"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY_RIGHT_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY_RIGHT_PIN", "kind": "variable", "doc": "<p>KEY_RIGHT_PIN (int):\n    Key right pin number.</p>\n", "default_value": "26"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY_PRESS_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY_PRESS_PIN", "kind": "variable", "doc": "<p>KEY_PRESS_PIN (int):\n    Key press pin number.</p>\n", "default_value": "13"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY1_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY1_PIN", "kind": "variable", "doc": "<p>KEY1_PIN (int):\n    Key 1 pin number.</p>\n", "default_value": "21"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY2_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY2_PIN", "kind": "variable", "doc": "<p>KEY2_PIN (int):\n    Key 2 pin number.</p>\n", "default_value": "20"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.KEY3_PIN", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.KEY3_PIN", "kind": "variable", "doc": "<p>KEY3_PIN (int):\n    Key 3 pin number.</p>\n", "default_value": "16"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_WIDTH", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_WIDTH", "kind": "variable", "doc": "<p>LCD_WIDTH (int):\n    Width of the display in pixel.</p>\n", "default_value": "128"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_HEIGHT", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_HEIGHT", "kind": "variable", "doc": "<p>LCD_HEIGHT (int):\n    Height of the display in pixel.</p>\n", "default_value": "128"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_X", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_X", "kind": "variable", "doc": "<p>LCD_X (int):\n    Display adjustment in x-direction.</p>\n", "default_value": "2"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_Y", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_Y", "kind": "variable", "doc": "<p>LCD_Y (int):\n    Display adjustment in y-direction.</p>\n", "default_value": "1"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_X_MAXPIXEL", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_X_MAXPIXEL", "kind": "variable", "doc": "<p>LCD_X_MAXPIXEL (int):\n    Display width maximum memory in pixel.</p>\n", "default_value": "132"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.LCD_Y_MAXPIXEL", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.LCD_Y_MAXPIXEL", "kind": "variable", "doc": "<p>LCD_Y_MAXPIXEL (int):\n    Display height maximum memory in pixel.</p>\n", "default_value": "162"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.L2R_U2D", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.L2R_U2D", "kind": "variable", "doc": "<p>L2R_U2D (int):\n    Left to right, up to down scanning method.</p>\n", "default_value": "1"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.L2R_D2U", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.L2R_D2U", "kind": "variable", "doc": "<p>L2R_D2U (int):\n    Left to right, down to up scanning method.</p>\n", "default_value": "2"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.R2L_U2D", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.R2L_U2D", "kind": "variable", "doc": "<p>R2L_U2D (int):\n    Right to left, up to down scanning method.</p>\n", "default_value": "3"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.R2L_D2U", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.R2L_D2U", "kind": "variable", "doc": "<p>R2L_D2U (int):\n    Right to left, down to up scanning method.</p>\n", "default_value": "4"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.U2D_L2R", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.U2D_L2R", "kind": "variable", "doc": "<p>U2D_L2R (int):\n    Up to down, left to right scanning method.</p>\n", "default_value": "5"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.U2D_R2L", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.U2D_R2L", "kind": "variable", "doc": "<p>U2D_R2L (int):\n    Up to down, right to left scanning method.</p>\n", "default_value": "6"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.D2U_L2R", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.D2U_L2R", "kind": "variable", "doc": "<p>D2U_L2R (int):\n    Down to up, left to right scanning method.</p>\n", "default_value": "7"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.D2U_R2L", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.D2U_R2L", "kind": "variable", "doc": "<p>D2U_R2L (int):\n    Down to up, right to left scanning method.</p>\n", "default_value": "8"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.SCAN_DIR_DFT", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.SCAN_DIR_DFT", "kind": "variable", "doc": "<p>SCAN_DIR_DFT (int):\n    Default scan direction.</p>\n", "default_value": "6"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.SPI", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.SPI", "kind": "variable", "doc": "<p>SPI (Any):\n    SPI device with bus 0 and device 0.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.delay_driver_ms", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.delay_driver_ms", "kind": "function", "doc": "<p>Method that delays the driver execution by the given number\nof milliseconds.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>delay (int):\n    Number of milliseconds for the delay.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">delay</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.cleanup_GPIO", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.cleanup_GPIO", "kind": "function", "doc": "<p>Method that initializes the GPIO cleanup.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.init_GPIO", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.init_GPIO", "kind": "function", "doc": "<p>Method that initializes the GPIO object for the LCD display with\nor without the input keys.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>with_warnings (bool):\n    Sets whether warnings are displayed on the console.\n    Default value is False.</p>\n\n<p>with_keys (bool):\n    Sets whether the keys of the display should be initialized.\n    Default value is False.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (Optional[int]):\n    On success 0 is returned and None in all other cases.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">with_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">with_keys</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_config.LCD144Config.write_SPI_bytes", "modulename": "weather_display.displays.lcd_144_config", "qualname": "LCD144Config.write_SPI_bytes", "kind": "function", "doc": "<p>Method that writes the given byte data to the SPI interface.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>data (list[int]):\n    Byte data that will be written to the SPI interface.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller", "modulename": "weather_display.displays.lcd_144_controller", "kind": "module", "doc": "<p>The lcd_144_controller module contains the LCD144Controller class that is\nresponsible for the management and direct control of the\n1.44inch LCD HAT SPI interface from Waveshare. The Controller uses the LCD144\nand LCD144Config class and defines additional callback functions.</p>\n\n<p>MIT License</p>\n\n<p>Copyright (C) July 16, 2018 Yehui from Waveshare</p>\n\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documnetation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to  whom the Software is\nfurished to do so, subject to the following conditions:</p>\n\n<p>The above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.</p>\n\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS OR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller", "kind": "class", "doc": "<p>Class that is responsible for the management and direct control of the\n1.44inch LCD HAT SPI interface from Waveshare.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.__init__", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.__init__", "kind": "function", "doc": "<p>Constructor for the LCD144Controller objects.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.BOUNCETIME", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.BOUNCETIME", "kind": "variable", "doc": "<p>BOUNCETIME (int):\n    Bouncetime of the switches next to the LCD display in ms.\n    The time is used for software switch debouncing.</p>\n", "default_value": "500"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.display", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.display", "kind": "variable", "doc": "<p>display (Optional[LCD144]):\n    LCD display object for configuration and control of the\n    1.44inch LCD HAT SPI interface from Waveshare. The default\n    value for failed initialization is None.</p>\n"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.cleanup", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.cleanup", "kind": "function", "doc": "<p>Method that clears the display and resets the GPIO pins\nto their default state. The default state is the configuration\nbefore the program started.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.add_event_detect", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.add_event_detect", "kind": "function", "doc": "<p>Method to add an event detection for a specified key\nwith a given callback function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>key (int):\n    Number of the pin that is connected to the key.</p>\n\n<p>callback (Any):\n    Callback function to register with the set event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.add_event_detect_KEY1", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.add_event_detect_KEY1", "kind": "function", "doc": "<p>Method to add an event detection for KEY1 with a given\ncallback function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>callback (Any):\n    Callback function to register with the set event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.add_event_detect_KEY2", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.add_event_detect_KEY2", "kind": "function", "doc": "<p>Method to add an event detection for KEY2 with a given\ncallback function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>callback (Any):\n    Callback function to register with the set event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.add_event_detect_KEY3", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.add_event_detect_KEY3", "kind": "function", "doc": "<p>Method to add an event detection for KEY3 with a given\ncallback function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>callback (Any):\n    Callback function to register with the set event.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.remove_event_detect", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.remove_event_detect", "kind": "function", "doc": "<p>Method to remove an event detection from a specified key.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>key (int):\n    Number of the pin that is connected to the key.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.remove_event_detect_KEY1", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.remove_event_detect_KEY1", "kind": "function", "doc": "<p>Method to remove an event detection from KEY1.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.remove_event_detect_KEY2", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.remove_event_detect_KEY2", "kind": "function", "doc": "<p>Method to remove an event detection from KEY2.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.remove_event_detect_KEY3", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.remove_event_detect_KEY3", "kind": "function", "doc": "<p>Method to remove an event detection from KEY3.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.displays.lcd_144_controller.LCD144Controller.show_image", "modulename": "weather_display.displays.lcd_144_controller", "qualname": "LCD144Controller.show_image", "kind": "function", "doc": "<p>Method that shows an image on the display with the already\nconfigurated settings. If the image is not present nothing\nwill be done.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>image (Any):\n    Image that will be shown on the display.\n    The image needs to match the display size in pixel.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">image</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models", "modulename": "weather_display.models", "kind": "module", "doc": "<h1 id=\"description-of-the-models-sub-package\">Description of the models sub-package</h1>\n\n<p>The models package is a sub-package of the weather_display package and\ncontains all modules and classes that represent specific data structures\nused by the weather_display package.</p>\n\n<p>Author: Jan-Lukas Wolf</p>\n"}, {"fullname": "weather_display.models.display_data", "modulename": "weather_display.models.display_data", "kind": "module", "doc": "<p>The display_data module contains the DisplayData class that is used to store and\nprocess the weather data that will be displayed by using the different methods\nof the Display class. Additional it stores mapping dictionaries to convert\ndata to strings that are human readable.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData", "modulename": "weather_display.models.display_data", "qualname": "DisplayData", "kind": "class", "doc": "<p>Class that contains the different parts of the weather data that will be\ndisplayed by the Display class methods. The data is gathered by the\nother Data classes available in the package. An additional mapping\ndictionary is stored as well.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.__init__", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.__init__", "kind": "function", "doc": "<p>Constructor for the DisplayData objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>station_name (str):\n    Name of the weather station. Default value is Error.</p>\n\n<p>date_time (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data. Default value is None.</p>\n\n<p>temperature (float):\n    The temperature in degree celsius. Default value is NAN.</p>\n\n<p>forecast (int):\n    A number representing the weather forecast of the day.\n    Default value is 0.</p>\n\n<p>daily_min (float):\n    Minimum temperature of the day in degree celsius.\n    Default value is NAN.</p>\n\n<p>daily_max (float):\n    Maximum temperature of the day in degree celsius.\n    Default value is NAN.</p>\n\n<p>dew_point (float):\n    The dew point in degree celsius. Default value is NAN.</p>\n\n<p>precipitation (float):\n    The current precipitation in millimeter.\n    Default value is NAN.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">station_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">date_time</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temperature</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">forecast</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">daily_min</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">daily_max</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">dew_point</span><span class=\"o\">=</span><span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">precipitation</span><span class=\"o\">=</span><span class=\"n\">nan</span></span>)</span>"}, {"fullname": "weather_display.models.display_data.DisplayData.DATE_FORMAT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.DATE_FORMAT", "kind": "variable", "doc": "<p>DATE_FORMAT (tuple[str, str]):\n    A tuple defining the date format and default output string for the format.</p>\n", "default_value": "(&#x27;%a., %d.%m.%Y&#x27;, &#x27;Thu., 01.01.1970&#x27;)"}, {"fullname": "weather_display.models.display_data.DisplayData.TIME_FORMAT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.TIME_FORMAT", "kind": "variable", "doc": "<p>TIME_FORMAT (tuple[str, str]):\n    A tuple defining the time format and default output string for the format.</p>\n", "default_value": "(&#x27;%H:%M&#x27;, &#x27;00:00&#x27;)"}, {"fullname": "weather_display.models.display_data.DisplayData.ICON_DICT", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.ICON_DICT", "kind": "variable", "doc": "<p>ICON_DICT (dict[int, str]):\n    A dictionary that contains the mapping of forecast icon numbers\n    to human readable string representations.</p>\n", "default_value": "{1: &#x27;sun&#x27;, 2: &#x27;sun, slightly cloudy&#x27;, 3: &#x27;sun, cloudy&#x27;, 4: &#x27;clouds&#x27;, 5: &#x27;fog&#x27;, 6: &#x27;fog, risk of slipping&#x27;, 7: &#x27;light rain&#x27;, 8: &#x27;rain&#x27;, 9: &#x27;heavy rain&#x27;, 10: &#x27;light rain, risk of slipping&#x27;, 11: &#x27;heavy rain, risk of slipping&#x27;, 12: &#x27;rain, sporadic snowfall&#x27;, 13: &#x27;rain, increased snowfall&#x27;, 14: &#x27;light snowfall&#x27;, 15: &#x27;snowfall&#x27;, 16: &#x27;heavy snowfall&#x27;, 17: &#x27;clouds, hail&#x27;, 18: &#x27;sun, light rain&#x27;, 19: &#x27;sun, heavy rain&#x27;, 20: &#x27;sun, rain, sporadic snowfall&#x27;, 21: &#x27;sun, rain, increased snowfall&#x27;, 22: &#x27;sun, sporadic snowfall&#x27;, 23: &#x27;sun, increased snowfall&#x27;, 24: &#x27;sun, hail&#x27;, 25: &#x27;sun, heavy hail&#x27;, 26: &#x27;thunderstorm&#x27;, 27: &#x27;thunderstorm, rain&#x27;, 28: &#x27;thunderstorm, heavy rain&#x27;, 29: &#x27;thunderstorm, hail&#x27;, 30: &#x27;thunderstorm, heavy hail&#x27;, 31: &#x27;wind&#x27;}"}, {"fullname": "weather_display.models.display_data.DisplayData.station_name", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.station_name", "kind": "variable", "doc": "<p>station_name (str):\n    Name of the weather station.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.date_time", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.date_time", "kind": "variable", "doc": "<p>date_time (Optional[datetime]):\n    A datetime object with the date and time of the provided\n    weather data.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.temperature", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.temperature", "kind": "variable", "doc": "<p>temperature (float):\n    The temperature in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.forecast", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.forecast", "kind": "variable", "doc": "<p>forecast (int):\n    A number representing the weather forecast of the day.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.daily_min", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.daily_min", "kind": "variable", "doc": "<p>daily_min (float):\n    Minimum temperature of the day in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.daily_max", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.daily_max", "kind": "variable", "doc": "<p>daily_max (float):\n    Maximum temperature of the day in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.dew_point", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.dew_point", "kind": "variable", "doc": "<p>dew_point (float):\n    The dew point in degree celsius.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.precipitation", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.precipitation", "kind": "variable", "doc": "<p>precipitation (float):\n    The current precipitation in millimeter.</p>\n"}, {"fullname": "weather_display.models.display_data.DisplayData.get_formatted_date", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.get_formatted_date", "kind": "function", "doc": "<p>Method that uses the class constant DATE_FORMAT to convert the\ncurrent datetime object to a formatted date string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_date (str):\n    A formatted date representation of the datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.display_data.DisplayData.get_formatted_time", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.get_formatted_time", "kind": "function", "doc": "<p>Method that uses the class constant TIME_FORMAT to convert the\ncurrent datetime object to a formatted time string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_time (str):\n    A formatted time representation of the datetime object.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.display_data.DisplayData.get_formatted_forecast", "modulename": "weather_display.models.display_data", "qualname": "DisplayData.get_formatted_forecast", "kind": "function", "doc": "<p>Method that converts the forecast number to a human readable string\nby using the ICON_DICT dictionary.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>formatted_forecast (str):\n    A formatted string representing the weather forecast of the day.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.models.station", "modulename": "weather_display.models.station", "kind": "module", "doc": "<p>The station module contains the station class that holds all informations\nof a weather station.</p>\n"}, {"fullname": "weather_display.models.station.Station", "modulename": "weather_display.models.station", "qualname": "Station", "kind": "class", "doc": "<p>Class that contains all informations of a weather station.</p>\n"}, {"fullname": "weather_display.models.station.Station.__init__", "modulename": "weather_display.models.station", "qualname": "Station.__init__", "kind": "function", "doc": "<p>Constructor for the Station objects.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name (str):\n    Name of the station. Default name is Error.</p>\n\n<p>number (int):\n    Number of the station. Default value is 0.</p>\n\n<p>type (str):\n    Type of the station. Default value is the empty string.</p>\n\n<p>identifier (str):\n    Identifier of the station. Default value is the empty string.</p>\n\n<p>latitude (float):\n    Latitude of the station. Default value is 0.0.</p>\n\n<p>longitude (float):\n    Longitude of the station. Default value is 0.0.</p>\n\n<p>altitude (int):\n    Altitude of the station in meters over normal zero.\n    Default value is 0.</p>\n\n<p>river_basin (str):\n    River basin near the station. Default value is the empty string.</p>\n\n<p>state (str):\n    State in which the station stands. Default value is the empty string.</p>\n\n<p>start (Optional[datetime]):\n    The start date of the data set. Default value is None.</p>\n\n<p>end (Optional[datetime]):\n    The end date of the data set. Default value is None.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Error&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">&#39;0&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">altitude</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">river_basin</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "weather_display.models.station.Station.name", "modulename": "weather_display.models.station", "qualname": "Station.name", "kind": "variable", "doc": "<p>name (str):\n    Name of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.number", "modulename": "weather_display.models.station", "qualname": "Station.number", "kind": "variable", "doc": "<p>number (int):\n    Number of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.type", "modulename": "weather_display.models.station", "qualname": "Station.type", "kind": "variable", "doc": "<p>type (str):\n    Type of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.identifier", "modulename": "weather_display.models.station", "qualname": "Station.identifier", "kind": "variable", "doc": "<p>identifier (str):\n    Identifier of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.latitude", "modulename": "weather_display.models.station", "qualname": "Station.latitude", "kind": "variable", "doc": "<p>latitude (float):\n    Latitude of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.longitude", "modulename": "weather_display.models.station", "qualname": "Station.longitude", "kind": "variable", "doc": "<p>longitude (float):\n    Longitude of the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.altitude", "modulename": "weather_display.models.station", "qualname": "Station.altitude", "kind": "variable", "doc": "<p>altitude (int):\n    Altitude of the station in meter over normal zero.</p>\n"}, {"fullname": "weather_display.models.station.Station.river_basin", "modulename": "weather_display.models.station", "qualname": "Station.river_basin", "kind": "variable", "doc": "<p>river_basin (str):\n    River basin near the station.</p>\n"}, {"fullname": "weather_display.models.station.Station.state", "modulename": "weather_display.models.station", "qualname": "Station.state", "kind": "variable", "doc": "<p>state (str):\n    State in which the station stands.</p>\n"}, {"fullname": "weather_display.models.station.Station.start", "modulename": "weather_display.models.station", "qualname": "Station.start", "kind": "variable", "doc": "<p>start (Optional[datetime]):\n    The start date of the data set.</p>\n"}, {"fullname": "weather_display.models.station.Station.end", "modulename": "weather_display.models.station", "qualname": "Station.end", "kind": "variable", "doc": "<p>end (Optional[datetime]):\n    The end date of the data set.</p>\n"}, {"fullname": "weather_display.start", "modulename": "weather_display.start", "kind": "module", "doc": "<p>The start module contains the main function of the weather_display package\nand can be used as an entry point script for the package.</p>\n"}, {"fullname": "weather_display.start.get_argument_parser", "modulename": "weather_display.start", "qualname": "get_argument_parser", "kind": "function", "doc": "<p>Method that builds and returns an argument parser that is setup\nto act as a CLI for the weather_display package.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>parser (ArgumentParser):\n    The configurated argument parser for the CLI.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.start.get_station_from_args", "modulename": "weather_display.start", "qualname": "get_station_from_args", "kind": "function", "doc": "<p>Method that creates a Station object with the given data source and\noptions specified in the arguments.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>source (str):\n    Name or number of the selected data source.</p>\n\n<p>args (Namespace):\n    A namespace created by the argument parser with all arguments.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>station (Station):\n    Created station with the set options.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">source</span>, </span><span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.start.main", "modulename": "weather_display.start", "qualname": "main", "kind": "function", "doc": "<p>Main function of the weather_display package and command line script.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>success (int):\n    A successful run returns zero and all other runs return one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.utils", "modulename": "weather_display.utils", "kind": "module", "doc": "<p>The utils module contains utility functions for the weather_display package.</p>\n"}, {"fullname": "weather_display.utils.is_raspberry_pi", "modulename": "weather_display.utils", "qualname": "is_raspberry_pi", "kind": "function", "doc": "<p>Function that checks whether it is called on a Raspberry Pi or a\ndifferent machine.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>is_raspberry_pi (bool):\n    True if called on a Raspberry Pi and False in all other cases.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "weather_display.utils.load_config_from_json", "modulename": "weather_display.utils", "qualname": "load_config_from_json", "kind": "function", "doc": "<p>Method that loads a configuration from a json file that is located at\nthe given file path. The file needs to be a compatible json file.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>path (str):\n    The absolute path to the json file as a string.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>config (dict[str, dict[str, str]]):\n    A dictionary containing all configuration settings or an empty\n    dictionary if no data could be loaded.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();